# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type StorySection {
  content: String!
}

type Lesson {
  storySections: [StorySection!]!
  questions: [Question!]!
}

union Question = QuestionMultiChoice | QuestionMemory | QuestionDragDrop | QuestionBugHighlight

type QuestionMultiChoice {
  id: String!
  options: [String!]!
  code: String!
  type: QuestionType!
}

enum QuestionType {
  multiChoice
  memory
  dragDrop
  bugHighlight
}

type QuestionMemory {
  id: String!
  type: QuestionType!
  pairs: [[String!]!]!
}

type QuestionDragDrop {
  id: String!
  type: QuestionType!
  options: [String!]!
  code: String!
  slots: Float!
}

type QuestionBugHighlight {
  id: String!
  type: QuestionType!
  code: String!
}

type ModuleAssignment {
  id: String!
  name: String!
  icon: String!
  type: String!
  previousId: String
  pathId: String!
  previous: Module
  completed: Boolean!
  lesson: Lesson!
  assignment: Assignment!
}

union Module = ModuleAssignment | ModuleLesson

type ModuleLesson {
  id: String!
  name: String!
  icon: String!
  type: String!
  previousId: String
  pathId: String!
  previous: Module
  completed: Boolean!
  lesson: Lesson!
}

type Assignment {
  id: String!
  description: String!
  moduleId: String!
  module: ModuleAssignment!
}

type Character {
  id: String!
  name: String!
  displayName: String!
  path: Path
}

type Path {
  id: String!
  name: String!
  icon: String!
  description: String!
  createdAt: DateTime!
  modules: [Module!]!
  character: Character
  characterId: String
  progress: Float!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type UserPreferences {
  id: String!
  userId: String!
  practiceGoal: Float!
  why: String!
  codingAbility: Float!
}

type UserModule {
  id: String!
  userId: String!
  moduleId: String!
  path: Path!
  completedAt: DateTime
}

type User {
  id: ID!
  firstName: String!
  lastName: String!
  email: String!
  profileImage: String!
  userPreferences: UserPreferences
  createdAt: DateTime!
  streak: Float!
}

type AssignmentFile {
  id: String!
  name: String!
  type: String!
  content: String!
  assignmentId: String!
  authorId: String!
  assignment: Assignment!
  author: User!
}

type LoginOutput {
  accessToken: String!
}

type Concept {
  id: String!
  name: String!
  description: String!
  icon: String!
  taughtInId: String!
  taughtIn: ModuleLesson!
  storySection: StorySection!
}

type UserConcept {
  id: String!
  userId: String!
  conceptId: String!
  learned: DateTime!
  concept: Concept!
  user: User!
}

type BeginLesson {
  secret: String!
  lesson: ModuleLesson!
}

type Friend {
  id: String!
  user1Id: String!
  user2Id: String!
  requested: DateTime!
  status: String!
  initiator: String!
  since: DateTime
  user1: User!
  user2: User!
}

type FriendOutput {
  id: String!
  user1Id: String!
  user2Id: String!
  requested: DateTime!
  status: String!
  initiator: String!
  since: DateTime
}

type Query {
  assignmentFiles(assignmentId: String!): [AssignmentFile!]!
  userAssignmentFiles(authorId: String!): [AssignmentFile!]!
  assignments: [Assignment!]!
  moduleAssignments(moduleId: String!): [Assignment!]!
  users: [User!]!
  searchUsers(query: String!): [User!]!
  me: User!
  verifyToken(accessToken: String!): Boolean!
  characters: [Character!]!
  concepts: [Concept!]!
  concept(name: String!): Concept!
  userLearnedConcepts: [UserConcept!]!
  myFriends(userId: String!): [Friend!]!
  modules: [Module!]!
  pathModules(pathId: String!): [Module!]!
  paths(
    """Only get paths the current user has not joined"""
    notJoined: Boolean = false

    """Only get the current user's paths"""
    onlyJoined: Boolean = false
  ): [Path!]!
  path(id: String!): Path!
  checkAnswer(answer: [String!]!, questionId: String!): [Boolean!]!
  lessonStorySections(lessonId: String!): [StorySection!]!
}

type Mutation {
  createAssignmentFile(assignmentFile: CreateAssignmentFileInput!): AssignmentFile!
  updateAssignmentFile(file: UpdateAssignmentFileInput!): AssignmentFile!
  deleteAssignmentFile(assignmentFileId: String!): Boolean!
  createUser(user: UserInput!): User!
  updatePreferences(preferences: UserPreferencesInput!): UserPreferences!
  login(password: String!, email: String!): LoginOutput!
  createCharacter(character: CreateCharacterInput!): Character!
  updateCharacter(character: UpdateCharacterInput!): Character!
  deleteCharacter(id: String!): Boolean!
  beginLesson(id: String!): BeginLesson!
  completeLesson(answers: String!, id: String!): Boolean!
  completeModule(moduleName: String!): UserModule!
  createConcept(concept: CreateConceptInput!): Concept!
  updateConcept(concept: UpdateConceptInput!): Concept!
  deleteConcept(conceptId: String!): Boolean!
  learnConcept(conceptId: String!): Boolean!
  createFriendship(toId: String!): FriendOutput!
  respondToFriendRequest(response: String!, user2Id: String!, user1Id: String!): Friend!
  deleteFriendship(friendId: String!): Boolean!
  createPath(path: PathInput!): Path!
  joinPath(pathId: String!): Boolean!
  joinPaths(paths: [String!]!): Boolean!
  updatePath(path: UpdatePathInput!): Path!
}

input CreateAssignmentFileInput {
  name: String!
  type: String!
  content: String!
  assignmentId: String!
}

input UpdateAssignmentFileInput {
  id: String!
  name: String
  type: String
  content: String
  assignmentId: String
}

input UserInput {
  firstName: String!
  lastName: String!
  email: String!
  password: String!
}

input UserPreferencesInput {
  practiceGoal: Float
  why: String
  codingAbility: Float
}

input CreateCharacterInput {
  name: String!
  displayName: String!
}

input UpdateCharacterInput {
  id: String!
  name: String
  displayName: String
}

input CreateConceptInput {
  name: String!
  icon: String!
  description: String!
  taughtInId: String!
}

input UpdateConceptInput {
  id: String!
  name: String
  icon: String
  description: String
  taughtInId: String
}

input PathInput {
  name: String!
  icon: String!
  description: String!
  characterId: String
}

input UpdatePathInput {
  id: String!
  name: String
  icon: String
  description: String
  characterId: String
}
